{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shiy7\\\\OneDrive\\\\Desktop\\\\Project\\\\Flag Camp\\\\laiOffer\\\\Front-end\\\\delivery-web\\\\src\\\\components\\\\Register.js\";\nimport React, { Component } from 'react';\nimport { Form, Input, Icon, Button } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { API_ROOT } from '../constants';\n\nclass RegistrationForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const {\n        form\n      } = this.props;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const {\n        form\n      } = this.props;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.handleConfirmBlur = e => {\n      const {\n        value\n      } = e.target;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n          fetch(`${API_ROOT}/signup`, {\n            method: 'POST',\n            body: JSON.stringify({\n              username: values.username,\n              password: values.password\n            })\n          }).then(response => {\n            console.log(response);\n\n            if (response.ok) {\n              return response.text();\n            }\n\n            console.log('error');\n          }).then(data => {\n            console.log(data);\n          });\n        }\n      });\n    };\n  }\n\n  render() {\n    const {\n      getFieldDecorator\n    } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    return /*#__PURE__*/React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      className: \"register\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }\n    }, getFieldDecorator('username', {\n      rules: [{\n        required: true,\n        message: 'Please input your username!'\n      }]\n    })( /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 28\n      }\n    }))), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })( /*#__PURE__*/React.createElement(Input.Password, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 28\n      }\n    }))), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })( /*#__PURE__*/React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 28\n      }\n    }))), /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }\n    }, \"I already have an account, go back to \", /*#__PURE__*/React.createElement(Link, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 62\n      }\n    }, \"login\"))));\n  }\n\n}\n\nconst Register = Form.create({\n  name: 'register'\n})(RegistrationForm);\nexport default Register;","map":{"version":3,"sources":["C:/Users/shiy7/OneDrive/Desktop/Project/Flag Camp/laiOffer/Front-end/delivery-web/src/components/Register.js"],"names":["React","Component","Form","Input","Icon","Button","Link","API_ROOT","RegistrationForm","state","confirmDirty","validateToNextPassword","rule","value","callback","form","props","validateFields","force","compareToFirstPassword","getFieldValue","handleConfirmBlur","e","target","setState","handleSubmit","preventDefault","validateFieldsAndScroll","err","values","console","log","fetch","method","body","JSON","stringify","username","password","then","response","ok","text","data","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","rules","required","message","validator","Register","create","name"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport { Form, Input, Icon, Button } from 'antd';\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { API_ROOT } from '../constants';\r\n\r\n\r\nclass RegistrationForm extends Component {\r\n    state = {\r\n        confirmDirty: false\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 8 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 16 },\r\n            },\r\n        };\r\n        const tailFormItemLayout = {\r\n            wrapperCol: {\r\n                xs: {\r\n                    span: 24,\r\n                    offset: 0,\r\n                },\r\n                sm: {\r\n                    span: 16,\r\n                    offset: 8,\r\n                },\r\n            },\r\n        };\r\n\r\n        return (\r\n            <Form {...formItemLayout} onSubmit={this.handleSubmit}\r\n                  className=\"register\">\r\n                <Form.Item label=\"Username\">\r\n                    {\r\n                        getFieldDecorator('username', {\r\n                            rules: [\r\n                                { required: true, message: 'Please input your username!' }\r\n                            ]\r\n                        })(<Input />)\r\n                    }\r\n                </Form.Item>\r\n                <Form.Item label=\"Password\" hasFeedback>\r\n                    {\r\n                        getFieldDecorator('password', {\r\n                            rules: [\r\n                                {\r\n                                    required: true,\r\n                                    message: 'Please input your password!',\r\n                                },\r\n                                {\r\n                                    validator: this.validateToNextPassword,\r\n                                }\r\n                            ]\r\n                        })(<Input.Password />)\r\n                    }\r\n                </Form.Item>\r\n                <Form.Item label=\"Confirm Password\" hasFeedback>\r\n                    {\r\n                        getFieldDecorator('confirm', {\r\n                            rules: [\r\n                                {\r\n                                    required: true,\r\n                                    message: 'Please confirm your password!',\r\n                                },\r\n                                {\r\n                                    validator: this.compareToFirstPassword,\r\n                                }\r\n                            ]\r\n                        })(<Input.Password onBlur={this.handleConfirmBlur} />)\r\n                    }\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailFormItemLayout}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Register\r\n                    </Button>\r\n\r\n                    <p>I already have an account, go back to <Link to=\"/login\">login</Link></p>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    validateToNextPassword = (rule, value, callback) => {\r\n        const { form } = this.props;\r\n        if (value && this.state.confirmDirty) {\r\n            form.validateFields(['confirm'], { force: true });\r\n        }\r\n        callback();\r\n    };\r\n\r\n    compareToFirstPassword = (rule, value, callback) => {\r\n        const { form } = this.props;\r\n        if (value && value !== form.getFieldValue('password')) {\r\n            callback('Two passwords that you enter is inconsistent!');\r\n        } else {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    handleConfirmBlur = e => {\r\n        const { value } = e.target;\r\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n\r\n                fetch(`${API_ROOT}/signup`, {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({\r\n                        username: values.username,\r\n                        password: values.password\r\n                    })\r\n                })\r\n                    .then(response => {\r\n                        console.log(response);\r\n                        if(response.ok) {\r\n                            return response.text();\r\n                        }\r\n                        console.log('error')\r\n                    })\r\n                    .then(data => {\r\n                        console.log(data)\r\n                    })\r\n            }\r\n        });\r\n    };\r\n}\r\n\r\nconst Register = Form.create({ name: 'register' })(RegistrationForm);\r\n\r\nexport default Register;\r\n"]},"metadata":{},"sourceType":"module"}