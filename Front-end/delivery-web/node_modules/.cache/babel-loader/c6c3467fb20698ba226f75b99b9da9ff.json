{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shiy7\\\\OneDrive\\\\Desktop\\\\Project\\\\Flag Camp\\\\laiOffer\\\\Front-end\\\\delivery-web\\\\src\\\\components\\\\Register.js\";\nimport React from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { Link } from 'react-router-dom';\n\nclass RegistrationForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const {\n        value\n      } = e.target;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const {\n        form\n      } = this.props;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const {\n        form\n      } = this.props;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n  }\n\n  render() {\n    const {\n      getFieldDecorator\n    } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    return /*#__PURE__*/React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      className: \"register\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, getFieldDecorator('username', {\n      rules: [{\n        required: true,\n        message: 'Please input your username!'\n      }]\n    })( /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 24\n      }\n    }))), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })( /*#__PURE__*/React.createElement(Input.Password, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 24\n      }\n    }))), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })( /*#__PURE__*/React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 24\n      }\n    }))), /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    }, \"I already have an account, go back to \", /*#__PURE__*/React.createElement(Link, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 62\n      }\n    }, \"login\"))));\n  }\n\n}\n\nexport const Register = Form.create({\n  name: 'register'\n})(RegistrationForm);","map":{"version":3,"sources":["C:/Users/shiy7/OneDrive/Desktop/Project/Flag Camp/laiOffer/Front-end/delivery-web/src/components/Register.js"],"names":["React","Form","Input","Button","Link","RegistrationForm","Component","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","rules","required","message","validator","Register","create","name"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass RegistrationForm extends React.Component {\r\n    state = {\r\n        confirmDirty: false,\r\n        autoCompleteResult: [],\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n            }\r\n        });\r\n    };\r\n\r\n    handleConfirmBlur = e => {\r\n        const { value } = e.target;\r\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n    };\r\n\r\n    compareToFirstPassword = (rule, value, callback) => {\r\n        const { form } = this.props;\r\n        if (value && value !== form.getFieldValue('password')) {\r\n            callback('Two passwords that you enter is inconsistent!');\r\n        } else {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    validateToNextPassword = (rule, value, callback) => {\r\n        const { form } = this.props;\r\n        if (value && this.state.confirmDirty) {\r\n            form.validateFields(['confirm'], { force: true });\r\n        }\r\n        callback();\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 8 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 16 },\r\n            },\r\n        };\r\n        const tailFormItemLayout = {\r\n            wrapperCol: {\r\n                xs: {\r\n                    span: 24,\r\n                    offset: 0,\r\n                },\r\n                sm: {\r\n                    span: 16,\r\n                    offset: 8,\r\n                },\r\n            },\r\n        };\r\n\r\n        return (\r\n            <Form {...formItemLayout} onSubmit={this.handleSubmit} className=\"register\">\r\n                <Form.Item\r\n                    label=\"Username\"\r\n                >\r\n                    {getFieldDecorator('username', {\r\n                        rules: [{ required: true, message: 'Please input your username!' }],\r\n                    })(<Input />)}\r\n                </Form.Item>\r\n                <Form.Item label=\"Password\" hasFeedback>\r\n                    {getFieldDecorator('password', {\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input your password!',\r\n                            },\r\n                            {\r\n                                validator: this.validateToNextPassword,\r\n                            },\r\n                        ],\r\n                    })(<Input.Password />)}\r\n                </Form.Item>\r\n                <Form.Item label=\"Confirm Password\" hasFeedback>\r\n                    {getFieldDecorator('confirm', {\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: 'Please confirm your password!',\r\n                            },\r\n                            {\r\n                                validator: this.compareToFirstPassword,\r\n                            },\r\n                        ],\r\n                    })(<Input.Password onBlur={this.handleConfirmBlur} />)}\r\n                </Form.Item>\r\n                <Form.Item {...tailFormItemLayout}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Register\r\n                    </Button>\r\n                    <p>I already have an account, go back to <Link to=\"/login\">login</Link></p>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport const Register = Form.create({ name: 'register' })(RegistrationForm);\r\n"]},"metadata":{},"sourceType":"module"}